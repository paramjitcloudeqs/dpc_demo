type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "Python Pushdown"
      parameters:
        componentName: "Start"
    Python Pushdown:
      type: "python-pushdown"
      parameters:
        componentName: "Python Pushdown"
        warehouse: "[Environment Default]"
        externalAccessIntegrations:
        pythonVersion: "3.10"
        packagesGrid:
        scriptLocation: "Component"
        pythonScript: |-
          ###
          # Variables are directly accessible:
          #   print (myvar)
          # Updating a variable:
          #   context.updateVariable('myvar', 'new-value')
          # Updating a grid variable:
          #   context.updateGridVariable('mygridvar',[['list','of'],['lists','!']])
          # Running SQL against Snowflake
          #   session.sql('CREATE sample_product_data (id INT, name VARCHAR, serial_number VARCHAR)').collect()
          # Using Data Frames
          #   See here: https://docs.snowflake.com/en/developer-guide/snowpark/python/working-with-dataframes
          ###)
          print("Test")
          print("test2")
          print("Test 3")
          print("test 5")
        scriptTimeout: "360"
      postProcessing:
        updateScalarVariables:
design:
  components:
    Start:
      position:
        x: -460
        "y": -90
      tempMetlId: 1
    Python Pushdown:
      position:
        x: -120
        "y": -90
      tempMetlId: 2
